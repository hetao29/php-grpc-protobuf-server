<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: src/helloworld.proto

namespace Test\Helloworld;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Request type for server side streaming echo.
 *
 * Generated from protobuf message <code>Test.Helloworld.ServerStreamingEchoRequest</code>
 */
class ServerStreamingEchoRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Message string for server streaming request.
     *
     * Generated from protobuf field <code>string message = 1;</code>
     */
    protected $message = '';
    /**
     * The total number of messages to be generated before the server
     * closes the stream; default is 10.
     *
     * Generated from protobuf field <code>int32 message_count = 2;</code>
     */
    protected $message_count = 0;
    /**
     * The interval (ms) between two server messages. The server implementation
     * may enforce some minimum interval (e.g. 100ms) to avoid message overflow.
     *
     * Generated from protobuf field <code>int32 message_interval = 3;</code>
     */
    protected $message_interval = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $message
     *           Message string for server streaming request.
     *     @type int $message_count
     *           The total number of messages to be generated before the server
     *           closes the stream; default is 10.
     *     @type int $message_interval
     *           The interval (ms) between two server messages. The server implementation
     *           may enforce some minimum interval (e.g. 100ms) to avoid message overflow.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Src\Helloworld::initOnce();
        parent::__construct($data);
    }

    /**
     * Message string for server streaming request.
     *
     * Generated from protobuf field <code>string message = 1;</code>
     * @return string
     */
    public function getMessage()
    {
        return $this->message;
    }

    /**
     * Message string for server streaming request.
     *
     * Generated from protobuf field <code>string message = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setMessage($var)
    {
        GPBUtil::checkString($var, True);
        $this->message = $var;

        return $this;
    }

    /**
     * The total number of messages to be generated before the server
     * closes the stream; default is 10.
     *
     * Generated from protobuf field <code>int32 message_count = 2;</code>
     * @return int
     */
    public function getMessageCount()
    {
        return $this->message_count;
    }

    /**
     * The total number of messages to be generated before the server
     * closes the stream; default is 10.
     *
     * Generated from protobuf field <code>int32 message_count = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setMessageCount($var)
    {
        GPBUtil::checkInt32($var);
        $this->message_count = $var;

        return $this;
    }

    /**
     * The interval (ms) between two server messages. The server implementation
     * may enforce some minimum interval (e.g. 100ms) to avoid message overflow.
     *
     * Generated from protobuf field <code>int32 message_interval = 3;</code>
     * @return int
     */
    public function getMessageInterval()
    {
        return $this->message_interval;
    }

    /**
     * The interval (ms) between two server messages. The server implementation
     * may enforce some minimum interval (e.g. 100ms) to avoid message overflow.
     *
     * Generated from protobuf field <code>int32 message_interval = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setMessageInterval($var)
    {
        GPBUtil::checkInt32($var);
        $this->message_interval = $var;

        return $this;
    }

}

