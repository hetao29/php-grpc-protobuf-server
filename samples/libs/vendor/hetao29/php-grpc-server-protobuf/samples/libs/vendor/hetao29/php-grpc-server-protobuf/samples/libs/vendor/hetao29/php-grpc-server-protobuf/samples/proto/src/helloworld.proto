// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package Test.Helloworld;

// The greeting service definition.
service Greeter {
	//
	rpc NoOp(Empty) returns (Empty);
	// Sends a greeting
	rpc SayHello (HelloRequest) returns (HelloReply);

	// Sends back abort status.
	rpc EchoAbort(HelloRequest) returns (HelloReply) {};

	rpc ServerStreamingEcho(ServerStreamingEchoRequest) returns (stream ServerStreamingEchoResponse);
}

message Empty {}

// The request message containing the user's name.
message HelloRequest {
	string name = 1;
}

// The response message containing the greetings
message HelloReply {
	string message = 1;
}

// Request type for server side streaming echo.
message ServerStreamingEchoRequest {
	// Message string for server streaming request.
	string message = 1;

	// The total number of messages to be generated before the server
	// closes the stream; default is 10.
	int32 message_count = 2;

	// The interval (ms) between two server messages. The server implementation
	// may enforce some minimum interval (e.g. 100ms) to avoid message overflow.
	int32 message_interval = 3;
}
// Response type for server streaming response.
message ServerStreamingEchoResponse {
	// Response message.
	string message = 1;
}
